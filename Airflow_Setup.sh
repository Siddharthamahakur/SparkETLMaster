#!/bin/bash

set -e  # Exit script on any command failure
set -o pipefail  # Exit if any command in a pipeline fails
set -u  # Treat unset variables as an error

LOG_FILE="airflow_setup.log"
exec > "$LOG_FILE" 2>&1  # Redirect all output to log file

echo "ðŸš€ Starting Airflow setup..."

# Step 1: Setup Python Virtual Environment
echo "ðŸ”¹ Setting up Python virtual environment..."
if [ ! -d "airflow_venv" ]; then
    python3 -m venv airflow_venv
    echo "âœ… Virtual environment created."
else
    echo "âš  Virtual environment already exists. Skipping creation."
fi

source airflow_venv/bin/activate

# Step 2: Upgrade pip and install dependencies
echo "ðŸ”¹ Upgrading pip and installing dependencies..."
pip install --upgrade pip setuptools wheel

echo "ðŸ”¹ Installing required Python packages..."
pip install --no-cache-dir --force-reinstall -r requirements.txt

echo "âœ… Dependencies installed successfully."

# Step 3: Verify package installations
echo "ðŸ”¹ Verifying package installations..."
python -c "import pyspark; print('âœ… PySpark version:', pyspark.__version__)"
python -c "import pandas; print('âœ… Pandas version:', pandas.__version__)"

# Step 4: Configure MySQL Connection in Airflow
echo "ðŸ”¹ Configuring MySQL Connection..."
export AIRFLOW__CORE__SQL_ALCHEMY_CONN="mysql+pymysql://airflow:airflow@localhost:3306/airflow"

# Step 5: Initialize Airflow Database
echo "ðŸ”¹ Initializing Airflow database..."
airflow db reset -y && airflow db init
echo "âœ… Airflow database initialized."

# Step 6: Set DAGs Directory
echo "ðŸ”¹ Setting DAGs directory..."
export AIRFLOW__CORE__DAGS_FOLDER="/Users/siddharthamahakur/PycharmProjects/SparkETLMaster/airflow/dags"
echo "âœ… DAGs directory set to $AIRFLOW__CORE__DAGS_FOLDER"

# Step 7: Start Airflow services
echo "ðŸ”¹ Starting Airflow services..."
airflow webserver --port 8080 &> airflow_webserver.log &
WEB_PID=$!
echo "âœ… Airflow Webserver started (PID: $WEB_PID)"

airflow scheduler &> airflow_scheduler.log &
SCHEDULER_PID=$!
echo "âœ… Airflow Scheduler started (PID: $SCHEDULER_PID)"

# Step 8: Create Airflow Admin User
echo "ðŸ”¹ Creating Airflow admin user..."
airflow users delete --username admin || true  # Ignore errors if user doesn't exist
airflow users create \
  --username admin \
  --password admin \
  --firstname Admin \
  --lastname User \
  --role Admin \
  --email admin@example.com
echo "âœ… Airflow admin user created."

# Final Confirmation
echo "ðŸŽ‰ Airflow setup completed successfully!"